name: PR QA Automation

on:
  pull_request:
    types: [opened, synchronize]
    branches:
        - main

jobs:
    pr_qa_automation:
        permissions:
            pull-requests: write
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            - name: Get pr summary'
              id: pr_info
              uses: actions/github-script@v7
              with: 
                script: |
                  const pr = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.payload.pull_request.number
                  });
                  return {
                    pr_number: pr.data.number,
                    summary: pr.data.body,
                  }
            - name: Send data to Dify and get result file
              id: dify_request
              run: |
                pr_info='${{ steps.pr_info.outputs.result }}'
                pr_summary=$(echo "$pr_info" | jq -r '.summary')
                pr_number=$(echo "$pr_info" | jq -r '.pr_number')

                json_data=$(jq -n \
                    --arg query "$pr_summary" \
                    --arg user "$pr_number" \
                    '{
                        inputs: {},
                        query: $query,
                        response_mode: "blocking",
                        conversation_id: "",
                        user: $user,
                        files: []
                    }')

                response=$(curl -X POST 'https://api.dify.ai/v1/chat-messages' \
                    --header 'Authorization: Bearer ${{ secrets.DIFY_QA_AUTOMATION }}' \
                    --header 'Content-Type: application/json' \
                    --data-raw "$json_data"
                )

                response_body=$(echo "$response" | sed '$d')
                answer=$(echo "$response_body" | jq -r '.answer // empty')

                echo "csv_text<<EOF" >> $GITHUB_OUTPUT
                echo "$answer" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
            - name: Create csv file
              run: |
                echo '${{ steps.dify_request.outputs.csv_text }}' > test_case.csv
            - name: Upload csv file as artifact
              id: uploader
              uses: actions/upload-artifact@v4
              with:
                name: test_case
                path: test_case.csv
            - name: Update PR description with download link
              uses: actions/github-script@v7
              with:
                script: |
                  const prInfo = ${{toJson(steps.pr_info.outputs.result)}};
                  
                  let body = prInfo.summary || '';
                  body += '\n\n---\n\n';
                  body += '## QA Test Case\n';
                  body += '[Test Case CSV](${{ steps.uploader.outputs.artifact-url }})';
                  
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.payload.pull_request.number,
                    body: body
                  });